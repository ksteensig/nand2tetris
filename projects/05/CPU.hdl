// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is  placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    And16(a=instruction,
          b[0..15]=true,
          out[0..2]=jbits,
          out[3]=d3, out[4]=d2, out[5]=d1,
          out[6]=c6, out[7]=c5, out[8]=c4,
          out[9]=c3, out[10]=c2, out[11]=c1,
          out[12]=abit, out[15]=ibit);

    
    Not(in=ibit, out=writeA1);
    Or(a=d1, b=writeA1, out=writeA);

    Mux16(a=instruction, b=mout, sel=ibit, out=mux1);
    ARegister(in=mux1, load=writeA, out=aout);

    And(a=true, b=d3, out=writeM1);
    And(a=ibit, b=writeM1, out=writeM);
    And16(a=aout, b[0..15]=true, out[0..14]=addressM);
    
    Mux16(a=aout, b=inM, sel=abit, out=mux2);
    And(a=ibit, b=d2, out=writeD);
    DRegister(in=mout, load=writeD, out=dout);

    ALU(x=dout, y=mux2,
        zx=c1, nx=c2,
        zy=c3, ny=c4,
        f=c5, no=c6,
        out=mout, zr=eq, ng=le);

    And16(a=mout, b[0..15]=true, out=outM);

// determine if jumping
    Not(in=eq, out=neq);
    Or(a=le, b=eq, out=leq);
    Xor(a=true, b=leq, out=gr);
    Or(a=gr, b=eq, out=geq);

    DMux8Way(in=true, sel=jbits,
             a=null, b=jgt1,
             c=jeq1, d=jge1,
             e=jlt1, f=jne1,
             g=jle1, h=jmp1);

    And(a=jgt1, b=gr, out=jgt);
    And(a=jeq1, b=eq, out=jeq);
    And(a=jge1, b=geq, out=jge);
    And(a=jlt1, b=le, out=jlt);
    And(a=jne1, b=neq, out=jne);
    And(a=jle1, b=leq, out=jle);
    
    Or8Way(in[0]=jgt,
           in[1]=jeq,
           in[2]=jge,
           in[3]=jlt,
           in[4]=jne,
           in[5]=jle,
           in[6]=jmp1,
           in[7]=false,
           out=jmp2);

// ensure we only jump for C instructions
    And(a=jmp2, b=ibit, out=jmp);

// increment if not jumping
    Xor(a=jmp, b=true, out=inc);

    PC(in=aout, load=jmp, inc=inc, reset=reset, out[0..14]=pc);
}